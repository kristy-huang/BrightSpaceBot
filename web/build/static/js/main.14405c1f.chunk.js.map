{"version":3,"sources":["auth.js","components/Home.js","components/Login.js","components/Navbar.js","components/Register.js","components/UpdateProfile.js","components/GetBot.js","App.js","reportWebVitals.js","index.js"],"names":["createAuthProvider","accessTokenKey","onUpdateToken","token","fetch","method","body","refresh_token","then","res","json","useAuth","login","logout","LoggedInHome","LoggedOutHome","to","className","Home","props","loggedIn","Login","useForm","register","handleSubmit","watch","reset","errors","formState","history","useHistory","Form","Group","Label","Control","type","placeholder","required","maxLength","username","style","color","minLength","password","Button","as","variant","onClick","data","console","log","sessionStorage","setItem","requestOptions","headers","JSON","stringify","status","access_token","push","message","alert","catch","err","LoggedInLinks","LoggedOutLinks","Navbar","id","Register","firstName","lastName","major","confirmPassword","Select","value","storageLocation","notificationFrequency","LoggedIn","getItem","LoggedOut","UpdateProfile","href","target","GetBot","App","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.14405c1f.chunk.js","sourcesContent":["import {createAuthProvider} from 'react-token-auth'\r\n\r\nexport const [useAuth, authFetch, login, logout] =\r\n    createAuthProvider({\r\n        accessTokenKey: 'access_token',\r\n        onUpdateToken: (token) => fetch('/refresh', {\r\n            method: 'POST',\r\n            body: token.refresh_token\r\n        })\r\n        .then(res => res.json())\r\n    })","import React from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport {useAuth} from '../auth'\r\n\r\nfunction LoggedInHome() {\r\n    return (\r\n        <div>\r\n            <p>You are logged in</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction LoggedOutHome() {\r\n    return (\r\n        <>\r\n        <h1>Welcome to BrightSpaceBot</h1>\r\n        <br></br>\r\n        <Link to=\"/register\" className=\"btn btn-primary\">Get Started</Link>\r\n        </>\r\n    )\r\n}\r\n\r\nfunction Home(props) {\r\n    const [loggedIn] = useAuth()\r\n    return (\r\n        <div className=\"home container\">\r\n            {loggedIn?<LoggedInHome/>:<LoggedOutHome/>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home","import React, {useState} from 'react'\r\nimport {Form, Button} from 'react-bootstrap'\r\nimport {Link} from 'react-router-dom'\r\nimport {useForm} from 'react-hook-form'\r\nimport {login} from '../auth'\r\nimport {useHistory} from 'react-router-dom'\r\n\r\nfunction Login(props) {\r\n    const {register, watch, handleSubmit, reset, formState:{errors}} = useForm();\r\n    const history = useHistory()\r\n\r\n    const loginUser = (data)=>{\r\n        console.log(data)\r\n        sessionStorage.setItem('username', data.username);\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json'\r\n            },\r\n            body:\r\n              JSON.stringify({\r\n                \"username\": data.username,\r\n                \"password\": data.password\r\n              })\r\n        };\r\n\r\n        fetch('http://localhost:5000/login', requestOptions)\r\n            .then(res=>res.json())\r\n            .then(data=>{\r\n                //console.log(data)\r\n                if (data.status === 200) {\r\n                    login(data.access_token)\r\n                    history.push('/')\r\n                }\r\n                else if (data.message === 'User not found') {\r\n                    history.push('register')\r\n                    alert(\"User not found. Please register for an account.\")\r\n                }\r\n                else if (data.message === 'Wrong password') {\r\n                    alert(\"Wrong password. Please try again.\")\r\n                }\r\n                else {\r\n                    alert(data.message)\r\n                }\r\n            })\r\n            .catch(err=>console.log(err))\r\n        reset()\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"form\">\r\n                <h1>Login Page</h1>\r\n                <br></br>\r\n                <form>\r\n                    <Form.Group>\r\n                        <Form.Label>Username</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            placeholder=\"Username\"\r\n                            {...register('username', {required: true, maxLength: 50})}/>\r\n                            {errors.username && <span style={{color:\"red\"}}>Username is required</span>}\r\n                    </Form.Group>\r\n                    <br></br>\r\n                    <Form.Group>\r\n                        <Form.Label>Password</Form.Label>\r\n                        <Form.Control\r\n                            type=\"password\"\r\n                            placeholder=\"Password\"\r\n                            {...register('password', {required: true, minLength: 6})}/>\r\n                            {errors.password && <span style={{color:\"red\"}}>Password is required</span>}\r\n                    </Form.Group>\r\n                    <br></br>\r\n                    <Form.Group>\r\n                        <Button as=\"sub\" variant=\"primary\" onClick={handleSubmit(loginUser)}>Login</Button>\r\n                    </Form.Group>\r\n                    <br></br>\r\n                    <Form.Group>\r\n                        <small>Don't have an account? <Link to=\"/register\">Create one</Link></small>\r\n                    </Form.Group>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login","import React from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport {useAuth, logout} from '../auth'\r\n\r\nfunction LoggedInLinks() {\r\n    return (\r\n        <>\r\n            <li className=\"nav-item\">\r\n                <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n                <Link className=\"nav-link active\" aria-current=\"page\" to=\"/updateProfile\">Update Profile</Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/getBot\">Get Bot</Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n                <a className=\"nav-link\" onClick={()=>logout()}>Log Out</a>\r\n            </li>\r\n        </>\r\n    )\r\n}\r\n\r\nfunction LoggedOutLinks() {\r\n    return (\r\n        <>\r\n            <li className=\"nav-item\">\r\n                <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/register\">Sign Up</Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/login\">Login</Link>\r\n            </li>\r\n        </>\r\n    )\r\n}\r\n\r\nfunction Navbar() {\r\n    const [loggedIn] = useAuth()\r\n\r\n    return (\r\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n            <div className=\"container-fluid\">\r\n                <Link className=\"navbar-brand\" to=\"/\">BrightSpaceBot</Link>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n                    <ul className=\"navbar-nav\">\r\n                        {loggedIn?<LoggedInLinks/>:<LoggedOutLinks/>}\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar","import React, {useState} from 'react'\r\nimport {Form, Button} from 'react-bootstrap'\r\nimport {useForm} from 'react-hook-form'\r\n\r\nfunction Register(props) {\r\n    const {register, watch, handleSubmit, reset, formState:{errors}} = useForm();\r\n\r\n    const submitForm = (data)=>{\r\n        console.log(data);\r\n        if (data.password === data.confirmPassword) {\r\n            const requestOptions = {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body:\r\n                    JSON.stringify({\r\n                        \"username\": data.username,\r\n                        \"firstName\": data.firstName,\r\n                        \"lastName\": data.lastName,\r\n                        \"password\": data.password,\r\n                        \"major\": data.major,\r\n                        \"storageLocation\": data.storageLocation,\r\n                        \"notificationFrequency\": data.notificationFrequency\r\n                    })\r\n            };\r\n            console.log(requestOptions)\r\n            fetch('http://localhost:5000/registerUser', requestOptions)\r\n            .then(res=>res.json())\r\n            .then(data=>alert(data.message))\r\n            .catch(err=>console.log(err))\r\n\r\n            reset();\r\n        }\r\n        else {\r\n            alert(\"Passwords do not match\");\r\n        }\r\n    }\r\n\r\n    //console.log(watch(\"username\"));\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"form\">\r\n                <h1>Sign Up Page</h1>\r\n                <br></br>\r\n                <form>\r\n                    <Form.Group>\r\n                        <Form.Label>First Name</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            placeholder=\"First Name\"\r\n                            {...register(\"firstName\", {required:true, maxLength:50})}/>\r\n                        {errors.firstName && <span style={{color:\"red\"}}>First name is required</span>}\r\n                    </Form.Group>\r\n                    <br></br>\r\n                    <Form.Group>\r\n                        <Form.Label>Last Name</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            placeholder=\"Last Name\"\r\n                            {...register(\"lastName\", {required:true, maxLength:50})}/>\r\n                            {errors.lastName && <span style={{color:\"red\"}}>Last name is required</span>}\r\n                    </Form.Group>\r\n                    <br></br>\r\n                    <Form.Group>\r\n                        <Form.Label>Major</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            placeholder=\"Major\"\r\n                            {...register(\"major\", {required:true, maxLength:50})}/>\r\n                            {errors.major && <span style={{color:\"red\"}}>Major is required.</span>}\r\n                    </Form.Group>\r\n                    <br></br>\r\n                    <Form.Group>\r\n                        <Form.Label>Username</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            placeholder=\"Username\"\r\n                            {...register(\"username\", {required:true, maxLength:50})}/>\r\n                            {errors.username && <span style={{color:\"red\"}}>Username is required</span>}\r\n                    </Form.Group>\r\n                    <br></br>\r\n                    <Form.Group>\r\n                        <Form.Label>Password</Form.Label>\r\n                        <Form.Control\r\n                            type=\"password\"\r\n                            placeholder=\"Password\"\r\n                            {...register(\"password\", {required:true, minLength:6})}/>\r\n                            {errors.password && <span style={{color:\"red\"}}>Password is required.</span>}\r\n                            {errors.password?.type===\"minLength\" && <span style={{color:\"red\"}}> Passwords should have at least 6 characters</span>}\r\n                    </Form.Group>\r\n                    <br></br>\r\n                    <Form.Group>\r\n                        <Form.Label>Confirm Password</Form.Label>\r\n                        <Form.Control\r\n                            type=\"password\"\r\n                            placeholder=\"Confirm Password\"\r\n                            {...register(\"confirmPassword\", {required:true, minLength:6})}/>\r\n                            {errors.confirmPassword && <span style={{color:\"red\"}}>Confirm password is required.</span>}\r\n                            {errors.confirmPassword?.type===\"minLength\"&&<span style={{color:\"red\"}}> Passwords should have at least 6 characters</span>}\r\n                    </Form.Group>\r\n                    <br></br>\r\n                    <Form.Group>\r\n                        <Form.Label>Choose a Storage Location</Form.Label>\r\n                        <Form.Select {...register(\"storageLocation\", {required:true})}>\r\n                            <option value=\"Google Drive\">Google Drive</option>\r\n                            <option value=\"Local Machine\">Local Machine</option>\r\n                        </Form.Select>\r\n                    </Form.Group>\r\n                    <br></br>\r\n                    <Form.Group>\r\n                        <Form.Label>Configure Your Notification Frequency</Form.Label>\r\n                        <Form.Select {...register(\"notificationFrequency\", {required:true})}>\r\n                            <option value=\"1\">Every 4 hours</option>\r\n                            <option value=\"2\">Every 6 hours</option>\r\n                            <option value=\"3\">Once a day</option>\r\n                            <option value=\"4\">Once a week</option>\r\n                            <option value=\"5\">Custom</option>\r\n                        </Form.Select>\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                        <Button as=\"sub\" variant=\"primary\" onClick={handleSubmit(submitForm)}>Sign up</Button>\r\n                    </Form.Group>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Register","import React, {useState} from 'react'\r\nimport {Form, Button} from 'react-bootstrap'\r\nimport {Link} from 'react-router-dom'\r\nimport {useForm} from 'react-hook-form'\r\nimport {useAuth, logout} from '../auth'\r\n\r\nfunction LoggedIn() {\r\n    const {register, watch, handleSubmit, reset, formState:{errors}} = useForm();\r\n    const submitForm = (data)=>{\r\n        const username = sessionStorage.getItem('username');\r\n        console.log(username)\r\n        console.log(data)\r\n        let major\r\n        if (data.major === \"\") {\r\n            major = '-1';\r\n        }\r\n        else {\r\n            major = data.major\r\n        }\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json'\r\n            },\r\n            body:\r\n              JSON.stringify({\r\n                \"username\": username,\r\n                \"major\": major,\r\n                \"storageLocation\": data.storageLocation,\r\n                \"notificationFrequency\": data.notificationFrequency\r\n              })\r\n        };\r\n\r\n        fetch('http://localhost:5000/updateProfile', requestOptions)\r\n            .then(res=>res.json())\r\n            .then(data=>{\r\n                alert(data.message)\r\n            })\r\n            .catch(err=>console.log(err))\r\n        reset()\r\n    }\r\n    return (\r\n        <>\r\n            <div className=\"form\">\r\n                <h1>Update Profile</h1>\r\n                <br></br>\r\n                <form>\r\n                    <Form.Group>\r\n                        <Form.Label>Major</Form.Label>\r\n                        <Form.Control\r\n                            type=\"major\"\r\n                            placeholder=\"Major\"\r\n                            {...register('major')}/>\r\n                    </Form.Group>\r\n                    <br></br>\r\n                    <Form.Group>\r\n                        <Form.Label>Storage Location</Form.Label>\r\n                        <Form.Select {...register('storageLocation')}>\r\n                            <option value=\"-1\">--</option>\r\n                            <option value=\"Google Drive\">Google Drive</option>\r\n                            <option value=\"Local Machine\">Local Machine</option>\r\n                        </Form.Select>\r\n                    </Form.Group>\r\n                    <br></br>\r\n                    <Form.Group>\r\n                        <Form.Label>Notification Frequency</Form.Label>\r\n                        <Form.Select {...register('notificationFrequency')}>\r\n                            <option value=\"-1\">--</option>\r\n                            <option value=\"1\">Every 4 hours</option>\r\n                            <option value=\"2\">Every 6 hours</option>\r\n                            <option value=\"3\">Once a day</option>\r\n                            <option value=\"4\">Once a week</option>\r\n                            <option value=\"5\">Custom</option>\r\n                        </Form.Select>\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                        <Button as=\"sub\" variant=\"primary\" onClick={handleSubmit(submitForm)}>Update</Button>\r\n                    </Form.Group>\r\n                    <br></br>\r\n                    <Form.Group>\r\n                        <Button as=\"sub\" variant=\"primary\"><Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Cancel</Link></Button>\r\n                    </Form.Group>\r\n                </form>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nfunction LoggedOut() {\r\n    return (\r\n        <>\r\n            <p>Please login to see this page</p>\r\n        </>\r\n    )\r\n}\r\n\r\nfunction UpdateProfile(props) {\r\n    const [loggedIn] = useAuth()\r\n    return (\r\n        <div className=\"container\">\r\n            {loggedIn?<LoggedIn/>:<LoggedOut/>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UpdateProfile","import React, {useState} from 'react'\r\nimport {Form, Button} from 'react-bootstrap'\r\nimport {Link} from 'react-router-dom'\r\nimport {useForm} from 'react-hook-form'\r\nimport {useAuth, logout} from '../auth'\r\n\r\nfunction LoggedIn() {\r\n    return (\r\n        <>\r\n             <h1>Instructions</h1>\r\n            <p>1. Create a server on Discord</p>\r\n            <p>2. Click the link below to get bot and select the server you want to add your bot to</p>\r\n            <a href=\"https://discord.com/api/oauth2/authorize?client_id=894695859567083520&permissions=534723950656&scope=bot\" target=\"_blank\">Get Bot</a>\r\n        </>\r\n    )\r\n}\r\n\r\nfunction LoggedOut() {\r\n    return (\r\n        <>\r\n            <p>Please login to see this page</p>\r\n        </>\r\n    )\r\n}\r\n\r\nfunction GetBot(props) {\r\n    const [loggedIn] = useAuth()\r\n    return (\r\n        <div className=\"container\">\r\n            {loggedIn?<LoggedIn/>:<LoggedOut/>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GetBot","import './App.css';\r\nimport Home from './components/Home';\r\nimport Login from './components/Login';\r\nimport Navbar from './components/Navbar';\r\nimport Register from './components/Register';\r\nimport UpdateProfile from './components/UpdateProfile'\r\nimport GetBot from './components/GetBot';\r\nimport './styles/main.css'\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route\r\n} from 'react-router-dom'\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n    <div className=\"App\">\r\n        <Navbar/>\r\n        <Switch>\r\n            <Route path=\"/login\">\r\n                <Login/>\r\n            </Route>\r\n            <Route path=\"/register\">\r\n                <Register/>\r\n            </Route>\r\n            <Route path=\"/updateProfile\">\r\n                <UpdateProfile/>\r\n            </Route>\r\n            <Route path=\"/getBot\">\r\n                <GetBot/>\r\n            </Route>\r\n            <Route path=\"/\">\r\n                <Home/>\r\n            </Route>\r\n        </Switch>\r\n    </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}